/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ZoneInteraction,
  ZoneInteractionInterface,
} from "../../../../seaport_v1_5/contracts/lib/ZoneInteraction";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidContractOrder",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "orderHash",
        type: "bytes32",
      },
    ],
    name: "InvalidRestrictedOrder",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212207827074d0c923fd45a17aa13c4dd067d1cfc02fda13f4cd509e297629dfd67d064736f6c63430008110033";

type ZoneInteractionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZoneInteractionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ZoneInteraction__factory extends ContractFactory {
  constructor(...args: ZoneInteractionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ZoneInteraction & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ZoneInteraction__factory {
    return super.connect(runner) as ZoneInteraction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZoneInteractionInterface {
    return new Interface(_abi) as ZoneInteractionInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ZoneInteraction {
    return new Contract(address, _abi, runner) as unknown as ZoneInteraction;
  }
}
